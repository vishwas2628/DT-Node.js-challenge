"use strict";

var _ = require("lodash");
var Q = require("q");

var settings = require("../settings");
var collection = require("./collection");

var MAP = collection.MAP;

var activateId = 0;

/*===================================================== Exports  =====================================================*/

exports.ids = [];
exports.sets = [];
exports.urls = {};
exports.styles = { email: "", main: "" };

exports.set = activate;
exports.reset = function () {
  return activate(settings.setSettings.get("active") || []);
};
exports.isActive = function (id) {
  return _.includes(exports.ids, id);
};

/*==================================================== Functions  ====================================================*/

function activate(setIds) {
  var aId = ++activateId;
  // create updated collections to export
  var ids = [];
  var sets = [];
  var urls = {};
  // filter sets that exist and are prepared
  for (var i = 0; i < setIds.length; i++) {
    var id = setIds[i];
    if (MAP.hasOwnProperty(id)) {
      var instance = MAP[id];
      if (instance.isPrepared()) {
        ids.push(id);
        sets.push(instance);
        urls[id] = instance.getURL();
      }
    }
  }
  // get updated styles
  return Q.spread([getMainStyles(sets), getEmailStyles(sets)], function (main, email) {
    // if latest request, export new values
    if (aId === activateId) {
      exports.ids = ids;
      exports.sets = sets;
      exports.urls = urls;
      exports.styles.main = main;
      exports.styles.email = email;
    }
  });
}

function getMainStyles(sets) {
  return Q.all(_.map(sets, function (instance) {
    return instance.getMainStyles();
  })).then(_.compact).then(function (styles) {
    return styles.join("\n");
  });
}

function getEmailStyles(sets) {
  return Q.all(_.map(sets, function (instance) {
    return instance.getEmailStyles();
  })).then(_.compact).then(function (styles) {
    return styles.join("\n");
  });
}
